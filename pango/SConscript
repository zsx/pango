# vim: ft=python expandtab
import tempfile
import re
import subprocess
import os
from site_init import generate_file_element

Import('env')

env.Append(CPPDEFINES = [("G_LOG_DOMAIN", r'"\"Pango\""'), 
                         "PANGO_ENABLE_BACKEND",
                         "PANGO_ENABLE_ENGINE",
                         ("SYSCONFDIR", r'"\"' + env['PREFIX'].replace('\\', '\\\\') + r'\\etc\""'),
                         ("LIBDIR", r'"\"' + env['PREFIX'].replace('\\', '\\\\') + r'\\lib\""')])
env.Append(CPPPATH=['#', '#pango'])

SConscript(['mini-fribidi/SConscript', 'opentype/SConscript'], exports='env')

env_pango = env.Clone(PDB='libpango.pdb')


pango_headers = Split("\
	pango.h		   \
	pango-attributes.h \
	pango-bidi-type.h  \
	pango-break.h	   \
	pango-context.h	   \
	pango-coverage.h   \
	pango-engine.h	   \
	pango-font.h       \
	pango-fontmap.h	   \
	pango-fontset.h    \
	pango-glyph.h	   \
	pango-glyph-item.h \
	pango-gravity.h    \
	pango-item.h	   \
	pango-language.h   \
	pango-layout.h	   \
	pango-matrix.h     \
	pango-modules.h	   \
	pango-renderer.h   \
	pango-script.h	   \
	pango-tabs.h	   \
	pango-types.h	   \
	pango-utils.h")

pango_sources =Split("\
	break.c					\
	ellipsize.c				\
	fonts.c					\
	glyphstring.c				\
	modules.c				\
	pango-attributes.c			\
	pango-bidi-type.c			\
	pango-color.c				\
	pango-context.c				\
	pango-coverage.c			\
	pango-engine.c				\
	pango-fontmap.c				\
	pango-fontset.c				\
	pango-glyph-item.c			\
	pango-gravity.c				\
	pango-item.c				\
	pango-language.c			\
	pango-layout.c				\
	pango-markup.c				\
	pango-matrix.c				\
	pango-renderer.c			\
	pango-script.c				\
	pango-tabs.c				\
	pango-utils.c				\
	reorder-items.c				\
	shape.c					\
	pango-enum-types.c			\
	module-defs-lang.c")

env_pango.DotIn('module-defs-lang.c', 'module-defs-lang.c.in')

env_pango_mk = env_pango.Clone(GLIB_MKENUMS = '%s\\bin\\glib-mkenums' % env_pango['PREFIX'])
env_pango_mk_h = env_pango_mk.Clone(GLIB_MKENUMS_ARGV = (('fhead', r'"#ifndef __PANGO_ENUM_TYPES_H__\n#define __PANGO_ENUM_TYPES_H__\n\n#include <glib-object.h>\n\nG_BEGIN_DECLS\n"'),
                            ('fprod', r'"/* enumerations from \"@filename@\" */\n"'),
                            ('vhead', r'"GType @enum_name@_get_type (void);\n#define PANGO_TYPE_@ENUMSHORT@ (@enum_name@_get_type())\n"'),
                            ('ftail', r'"G_END_DECLS\n\n#endif /* __PANGO_ENUM_TYPES_H__ */"')))
env_pango_mk_h.Depends(env_pango_mk_h.MkenumsGenerator('pango-enum-types.h', pango_headers), 'SConscript')

env_pango_mk_c = env_pango_mk.Clone(GLIB_MKENUMS_ARGV = (('fhead', '"#include <pango.h>"'),
                            ('fprod', r'"\n/* enumerations from \"@filename@\" */"'),
                            ('vhead', r'"GType\n@enum_name@_get_type (void)\n{\n  static GType etype = 0;\n  if (etype == 0) {\n    static const G@Type@Value values[] = {"'),
                            ('vprod', r'"      { @VALUENAME@, \"@VALUENAME@\", \"@valuenick@\" },"'),
                            ('vtail', r'"      { 0, NULL, NULL }\n    };\n    etype = g_@type@_register_static (\"@EnumName@\", values);\n  }\n  return etype;\n}\n"')))
env_pango_mk_c.Depends(env_pango_mk_c.MkenumsGenerator('pango-enum-types.c', pango_headers), 'SConscript')

env_pango.DotIn('pango-features.h', 'pango-features.h.in')
env_pango.Alias('install', env_pango.Install('$PREFIX/include/pango-1.0/pango', pango_headers + ['pango-enum-types.h', 'pango-features.h']))
env_pango['DOT_IN_SUBS']['@HEADERS@'] = generate_file_element(pango_headers + ['pango-enum-types.h', 'pango-features.h'], r'include/pango-1.0/pango', env_pango)

env_pango['DOT_SYMBOLS_FLAGS'] = '-DINCLUDE_VARIABLES -DG_OS_WIN32 -DALL_FILES'

#replace string literals in pango-language-sample-table.h with hex
def replace_with_hex(target, source, env):
    def dr(mo):
        return '"' + "".join(map(lambda x: '\\x%2x'%ord(x), mo.group(1))) + '"'
    ft = file(str(target[0]), 'wb')
    fs = file(str(source[0]), 'rb')
    lines = fs.read()
    lines = re.sub(r'"(.*?)"', dr, lines)
    ft.write(lines)
    ft.close()
    fs.close()

env_pango.Command('pango-language-sample-table.h', 'pango-language-sample-table.h.in', replace_with_hex)

env_pango.DotIn('pango.rc', 'pango.rc.in')
env_pango.RES('pango.res', 'pango.rc')
env_pango.ParseConfig('pkg-config cairo --cflags --libs')
env_pango.ParseConfig('pkg-config gobject-2.0 --cflags --libs')
env_pango.ParseConfig('pkg-config gmodule-2.0 --cflags --libs')
#env_pango.Append(LIBS = ['msimg32',  'gdi32', 'user32'])
pangoname = 'libpango' + env_pango['LIB_SUFFIX'] + '.dll'
dll = env_pango.SharedLibrary([pangoname, 'pango-1.0.lib'], pango_sources + ['mini-fribidi/mini-fribidi.lib', 'pango.def', 'pango.res'])
env_pango.Depends(dll, 'pango-language-sample-table.h')

env_pango.AddPostAction(dll, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')
env_pango.Alias('install', env_pango.Install('$PREFIX/bin', pangoname))
env_pango['DOT_IN_SUBS']['@DLLS@'] = generate_file_element(pangoname, r'bin', env_pango)

env_pango.Alias('install', env_pango.Install('$PREFIX/lib', 'pango-1.0.lib'))
env_pango.Alias('install', env_pango.InstallAs('$PREFIX/lib/libpango-1.0.lib', 'pango-1.0.lib'))
env_pango['DOT_IN_SUBS']['@LIBS@'] = generate_file_element(['pango-1.0.lib', 'libpango-1.0.lib'], r'lib', env_pango)
env_pango['DOT_IN_SUBS']['@PCS@'] = generate_file_element('pango.pc', r'lib/pkgconfig', env_pango)
if env_pango['DEBUG'] == 1:
    env_pango.Alias('install', env_pango.Install('$PREFIX/pdb', 'libpango.pdb'))
    env['DOT_IN_SUBS']['@PDBS@'] = '''
		  <Directory Id='pdb' Name='pdb'>
			  <Component Id='pdbs' Guid='a0ab7559-28e9-4fbe-9efd-aaa4363eb932'>
				  %s 
			  </Component>
		  </Directory>''' % generate_file_element(env_pango['PDB'], r'pdb', env_pango)

env_pango.DotIn('pangorun.wxs', 'pangorun.wxs.in')
env_pango.DotIn('pangodev.wxs', 'pangodev.wxs.in')
env_pango.Depends(['pangorun.wxs', 'pangodev.wxs'], 'SConscript')
env_pango.Alias('install', env_pango.Install('$PREFIX/wxs', ['pangorun.wxs', 'pangodev.wxs']))

#pangoft2
env_pangoft2 = env.Clone(PDB='libpangoft2.pdb')
env_pangoft2.Append(CPPDEFINES=['HAVE_FREETYPE', ('PANGO_MODULE_PREFIX', '_pango_basic_ft2')])
env_pangoft2.Append(CPPPATH='#/../msvc')
libpangoft2_HEADERS = Split("\
	pango-ot.h		\
	pangofc-font.h		\
	pangofc-fontmap.h	\
	pangofc-decoder.h	\
	pangoft2.h")
libpangoft2_SOURCES = Split(" \
	pangofc-font.c	   	\
	pangofc-fontmap.c	\
	pangofc-decoder.c	\
	pangoft2.c")
libpangoft2_SOURCES += Split("\
	module-defs-fc.c	\
	pangoft2-fontmap.c	\
	pangoft2-render.c	\
	pango-ot-buffer.c	\
	pango-ot-info.c		\
	pango-ot-ruleset.c      \
	pango-ot-tag.c")
libpangoft2_SOURCES += ['#/modules/basic/basic-fc.c']
env_pangoft2.DotIn('module-defs-fc.c', 'module-defs-fc.c.win32')
env_pangoft2.ParseConfig('pkg-config freetype2 --cflags --libs')
env_pangoft2.ParseConfig('pkg-config fontconfig --cflags --libs')
env_pangoft2.ParseConfig('pkg-config gobject-2.0 --cflags --libs')
env_pangoft2.ParseConfig('pkg-config gmodule-2.0 --cflags --libs')
env_pangoft2.Append(LIBS=['kernel32', 'user32', 'gdi32', 'advapi32'])
pangoft2name = 'libpangoft2' + env_pangoft2['LIB_SUFFIX'] + '.dll'
dll = env_pangoft2.SharedLibrary([pangoft2name, 'pangoft2-1.0.lib'], libpangoft2_SOURCES + ['pango-1.0.lib', 'pangoft2.def', 'pango.res', 'opentype/libharfbuzz.lib'])
env_pangoft2.AddPostAction(dll, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')

env_pangoft2.Alias('install', env_pangoft2.Install(r'$PREFIX/bin', pangoft2name))
env_pangoft2['DOT_IN_SUBS']['@DLLS@'] = generate_file_element(pangoft2name, r'bin', env_pangoft2)
env_pangoft2.Alias('install', env_pangoft2.Install(r'$PREFIX/include/pango-1.0/pango', libpangoft2_HEADERS))
env_pangoft2['DOT_IN_SUBS']['@HEADERS@'] = generate_file_element(libpangoft2_HEADERS, r'include/pango-1.0/pango', env_pangoft2)

env_pangoft2.Alias('install', env_pangoft2.Install(r'$PREFIX/lib', 'pangoft2-1.0.lib'))
env_pangoft2.Alias('install', env_pangoft2.InstallAs(r'$PREFIX/lib/libpangoft2-1.0.lib', 'pangoft2-1.0.lib'))
env_pangoft2['DOT_IN_SUBS']['@LIBS@'] = generate_file_element(['libpangoft2-1.0.lib', 'pangoft2-1.0.lib'], r'lib', env_pangoft2)
env_pangoft2['DOT_IN_SUBS']['@PCS@'] = generate_file_element(['pangoft2.pc'], r'lib/pkgconfig', env_pangoft2)

if env_pangoft2['DEBUG'] == 1:
    env_pangoft2.Alias('install', env_pangoft2.Install(r'$PREFIX/pdb', 'libpangoft2.pdb'))
    env_pangoft2['DOT_IN_SUBS']['@PDBS@'] = '''
		  <Directory Id='pdb' Name='pdb'>
			  <Component Id='pdbs' Guid='58c165f2-96f4-4c10-8cd4-36baf2cf4e79'>
				  %s 
			  </Component>
		  </Directory>''' % generate_file_element(env_pangoft2['PDB'], r'pdb', env_pangoft2)

env_pangoft2.DotIn('pangoft2run.wxs', 'pangoft2run.wxs.in')
env_pangoft2.DotIn('pangoft2dev.wxs', 'pangoft2dev.wxs.in')
env_pangoft2.Depends(['pangoft2run.wxs', 'pangoft2dev.wxs'], 'SConscript')
env_pangoft2.Alias('install', env_pangoft2.Install('$PREFIX/wxs', ['pangoft2run.wxs', 'pangoft2dev.wxs']))
#pangoxft
#require X11
'''
env_pangoxft = env.Clone(PDB='libpangoxft.pdb')
env_pangoxft.Append(CPPDEFINES=['HAVE_FREETYPE'])
env_pangoxft.Append(CPPPATH='#/../msvc')
libpangoxft_HEADERS = Split("pangoxft.h pangoxft-render.h")
libpangoxft_SOURCES = Split("\
	pangoxft-font.c		\
	pangoxft-fontmap.c      \
	pangoxft-render.c")
env_pangoxft.ParseConfig('pkg-config freetype2 --cflags --libs')
env_pangoxft.ParseConfig('pkg-config fontconfig --cflags --libs')
env_pangoxft.ParseConfig('pkg-config gobject-2.0 --cflags --libs')
env_pangoxft.ParseConfig('pkg-config gmodule-2.0 --cflags --libs')
env_pangoxft.Append(LIBS=['kernel32', 'user32', 'gdi32', 'advapi32'])
dll = env_pangoxft.SharedLibrary(['libpangoxft' + env_pangoxft['LIB_SUFFIX'] + '.dll', 'pangoxft-1.0.lib'], libpangoxft_SOURCES + ['pango-1.0.lib', 'pangoxft.def', 'pango.res'])
env_pangoxft.AddPostAction(dll, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')

if 'run' in env['install']:
    env.Alias('install', env.Install(r'$PREFIX/bin', 'libpangoxft' + env_pangoxft['LIB_SUFFIX'] + '.dll'))

if 'dev' in env['install']:
    env.Alias('install', env.Install(r'$PREFIX/include/pango-1.0/pango', libpangoxft_HEADERS))
    env.Alias('install', env.Install(r'$PREFIX/lib', 'pangoxft-1.0.lib'))
    env.Alias('install', env.InstallAs(r'$PREFIX/lib/libpangoxft-1.0.lib', 'pangoxft-1.0.lib'))
    if env_pangoxft['DEBUG'] == 1:
        env.Alias('install', env.Install(r'$PREFIX/pdb', 'libpangoxft.pdb'))
'''

#pangocairo
env_pangocairo = env.Clone(PDB='libpangocairo.pdb')
env_pangocairo.Append(CPPDEFINES=['HAVE_CAIRO_WIN32'])
libpangocairo_SOURCES = Split(" \
	pangocairo-context.c    \
	pangocairo-font.c	\
	pangocairo-fontmap.c    \
	pangocairo-render.c")
libpangocairo_SOURCES += Split("pangocairo-win32font.c pangocairo-win32fontmap.c")
env_pangocairo.ParseConfig('pkg-config cairo --cflags --libs')
env_pangocairo.ParseConfig('pkg-config gobject-2.0 --cflags --libs')
env_pangocairo.ParseConfig('pkg-config gmodule-2.0 --cflags --libs')
env_pangocairo.Append(LIBS=['kernel32', 'user32', 'gdi32', 'advapi32'])
pangocaironame = 'libpangocairo' + env_pangocairo['LIB_SUFFIX'] + '.dll'
dll = env_pangocairo.SharedLibrary([pangocaironame, 'pangocairo-1.0.lib'], libpangocairo_SOURCES + ['pango-1.0.lib', 'pangowin32-1.0.lib', 'pangocairo.def', 'pango.res'])
env_pangocairo.AddPostAction(dll, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')
env_pangocairo.Alias('install', env_pangocairo.Install('$PREFIX/include/pango-1.0/pango', 'pangocairo.h'))
env_pangocairo['DOT_IN_SUBS']['@HEADERS@'] = generate_file_element('pangocairo.h', r'include/pango-1.0/pango', env_pangocairo)

env_pangocairo.Alias('install', env_pangocairo.Install('$PREFIX/bin', pangocaironame))
env_pangocairo['DOT_IN_SUBS']['@DLLS@'] = generate_file_element(pangocaironame, r'bin', env_pangocairo)

env_pangocairo.Alias('install', env_pangocairo.Install('$PREFIX/lib', 'pangocairo-1.0.lib'))
env_pangocairo.Alias('install', env_pangocairo.InstallAs('$PREFIX/lib/libpangocairo-1.0.lib', 'pangocairo-1.0.lib'))
env_pangocairo['DOT_IN_SUBS']['@LIBS@'] = generate_file_element(['libpangocairo-1.0.lib', 'pangocairo-1.0.lib'], r'lib', env_pangocairo)
env_pangocairo['DOT_IN_SUBS']['@PCS@'] = generate_file_element(['pangocairo.pc'], r'lib/pkgconfig', env_pangocairo)

if env_pangocairo['DEBUG'] == 1:
    env_pangocairo.Alias('install', env_pangocairo.Install('$PREFIX/pdb', 'libpangocairo.pdb'))
    env_pangocairo['DOT_IN_SUBS']['@PDBS@'] = '''
		  <Directory Id='pdb' Name='pdb'>
			  <Component Id='pdbs' Guid='5ab0f7b7-840a-47ff-b81a-80a5cd4a9174'>
				  %s 
			  </Component>
		  </Directory>''' % generate_file_element(env_pangocairo['PDB'], r'pdb', env_pangocairo)

env_pangocairo.DotIn('pangocairorun.wxs', 'pangocairorun.wxs.in')
env_pangocairo.DotIn('pangocairodev.wxs', 'pangocairodev.wxs.in')
env_pangocairo.Depends(['pangocairorun.wxs', 'pangocairodev.wxs'], 'SConscript')
env_pangocairo.Alias('install', env_pangocairo.Install('$PREFIX/wxs', ['pangocairorun.wxs', 'pangocairodev.wxs']))

#modules
env_modules_basic_win32 = env.Clone()
env_modules_basic_win32.ParseConfig('pkg-config gobject-2.0 --cflags --libs')
env_modules_basic_win32.Append(CPPDEFINES=[('PANGO_MODULE_PREFIX', '_pango_basic_win32')])
env_modules_basic_win32.StaticObject('basic-win32.obj', '#modules/basic/basic-win32.c')
#pangowin32
env_pangowin32 = env.Clone(PDB='libpangowin32.pdb')
env_pangowin32.Append(CPPDEFINES=[('PANGO_MODULE_PREFIX', '_pango_basic_win32')])
libpangowin32_SOURCES = Split(" \
	module-defs-win32.c	\
	pangowin32.c		\
	pangowin32-fontcache.c	\
	pangowin32-fontmap.c")
env_pangowin32.DotIn('module-defs-win32.c', 'module-defs-win32.c.win32')
env_pangowin32.ParseConfig('pkg-config cairo --cflags --libs')
env_pangowin32.ParseConfig('pkg-config gobject-2.0 --cflags --libs')
env_pangowin32.ParseConfig('pkg-config gmodule-2.0 --cflags --libs')
env_pangowin32.Append(LIBS=['kernel32', 'user32', 'gdi32', 'advapi32'])
pangowin32name = 'libpangowin32' + env_pangowin32['LIB_SUFFIX'] + '.dll'
dll = env_pangowin32.SharedLibrary([pangowin32name, 'pangowin32-1.0.lib'], libpangowin32_SOURCES + ['pango-1.0.lib', 'basic-win32.obj', 'pangowin32.def', 'pango.res'])
env_pangowin32.AddPostAction(dll, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')
env_pangowin32.Alias('install', env_pangowin32.Install('$PREFIX/include/pango-1.0/pango', 'pangowin32.h'))
env_pangowin32['DOT_IN_SUBS']['@HEADERS@'] = generate_file_element('pangowin32.h', r'include/pango-1.0/pango', env_pangowin32)

env_pangowin32.Alias('install', env_pangowin32.Install('$PREFIX/bin', pangowin32name))
env_pangowin32['DOT_IN_SUBS']['@DLLS@'] = generate_file_element(pangowin32name, r'bin', env_pangowin32)

env_pangowin32.Alias('install', env_pangowin32.Install('$PREFIX/lib', 'pangowin32-1.0.lib'))
env_pangowin32.Alias('install', env_pangowin32.InstallAs('$PREFIX/lib/libpangowin32-1.0.lib', 'pangowin32-1.0.lib'))
env_pangowin32['DOT_IN_SUBS']['@LIBS@'] = generate_file_element(['libpangowin32-1.0.lib', 'pangowin32-1.0.lib'], r'lib', env_pangowin32)
env_pangowin32['DOT_IN_SUBS']['@PCS@'] = generate_file_element(['pangowin32.pc'], r'lib/pkgconfig', env_pangowin32)
if env_pangowin32['DEBUG'] == 1:
    env_pangowin32.Alias('install', env_pangowin32.Install('$PREFIX/pdb', 'libpangowin32.pdb'))
    env_pangowin32['DOT_IN_SUBS']['@PDBS@'] = '''
		  <Directory Id='pdb' Name='pdb'>
			  <Component Id='pdbs' Guid='201d1976-3879-4008-b279-b02b0f28fa37'>
				  %s 
			  </Component>
		  </Directory>''' % generate_file_element(env_pangowin32['PDB'], r'pdb', env_pangowin32)

#pango-query
env_pango_query_modules = env_pango.Clone(PDB = 'pango-query.pdb')
env_pango_query_modules.AddPostAction(
    env_pango_query_modules.Program('pango-querymodules', ['querymodules.c', 'pangowin32-1.0.lib', 'pango-1.0.lib']),
    'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')
query_install = env_pango_query_modules.Install(r'$PREFIX/bin', 'pango-querymodules.exe')
env_pangowin32['DOT_IN_SUBS']['@EXES@'] = generate_file_element('pango-querymodules.exe', r'bin', env_pangowin32)
env_pango_query_modules.PrependENVPath("PATH", env_pango_query_modules['PREFIX'] + r'\\bin')
env_pango_query_modules.Command('pango.modules', 'pango-querymodules.exe', '$SOURCE > $TARGET')
env_pango_query_modules.Depends('pango.modules', query_install)

env_pango_query_modules.Alias('install', env_pango_query_modules.Install(r'$PREFIX/etc/pango/', 'pango.modules'))
env_pangowin32['DOT_IN_SUBS']['@CONFS@'] = generate_file_element(['pango.modules'], r'etc/pango', env_pangowin32)

env_pangowin32.DotIn('pangowin32run.wxs', 'pangowin32run.wxs.in')
env_pangowin32.DotIn('pangowin32dev.wxs', 'pangowin32dev.wxs.in')
env_pangowin32.Depends(['pangowin32run.wxs', 'pangowin32dev.wxs'], 'SConscript')
env_pangowin32.Alias('install', env_pangowin32.Install('$PREFIX/wxs', ['pangowin32run.wxs', 'pangowin32dev.wxs']))
