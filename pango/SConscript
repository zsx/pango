# vim: ft=python expandtab
import tempfile
import re
import subprocess
import os

Import('env')

env.Append(CPPDEFINES = [("G_LOG_DOMAIN", r'"\"Pango\""'), 
                         "PANGO_ENABLE_BACKEND",
                         "PANGO_ENABLE_ENGINE",
                         ("SYSCONFDIR", r'"\"' + env['PREFIX'].replace('\\', '\\\\') + r'\\etc\""'),
                         ("LIBDIR", r'"\"' + env['PREFIX'].replace('\\', '\\\\') + r'\\lib\""')])
env.Append(CPPPATH=['#', '#pango'])

SConscript(['mini-fribidi/SConscript'#, 'opentype/SConscript' #doesn't compile yet
    ], exports='env')

env_pango = env.Clone(PDB='libpango.pdb')


pango_headers = Split("\
	pango.h		   \
	pango-attributes.h \
	pango-bidi-type.h  \
	pango-break.h	   \
	pango-context.h	   \
	pango-coverage.h   \
	pango-engine.h	   \
	pango-font.h       \
	pango-fontmap.h	   \
	pango-fontset.h    \
	pango-glyph.h	   \
	pango-glyph-item.h \
	pango-gravity.h    \
	pango-item.h	   \
	pango-language.h   \
	pango-layout.h	   \
	pango-matrix.h     \
	pango-modules.h	   \
	pango-renderer.h   \
	pango-script.h	   \
	pango-tabs.h	   \
	pango-types.h	   \
	pango-utils.h")

pango_sources =Split("\
	break.c					\
	ellipsize.c				\
	fonts.c					\
	glyphstring.c				\
	modules.c				\
	pango-attributes.c			\
	pango-bidi-type.c			\
	pango-color.c				\
	pango-context.c				\
	pango-coverage.c			\
	pango-engine.c				\
	pango-fontmap.c				\
	pango-fontset.c				\
	pango-glyph-item.c			\
	pango-gravity.c				\
	pango-item.c				\
	pango-language.c			\
	pango-layout.c				\
	pango-markup.c				\
	pango-matrix.c				\
	pango-renderer.c			\
	pango-script.c				\
	pango-tabs.c				\
	pango-utils.c				\
	reorder-items.c				\
	shape.c					\
	pango-enum-types.c			\
	module-defs-lang.c")

env_pango.DotIn('module-defs-lang.c', 'module-defs-lang.c.in')

env_pango_mk = env_pango.Clone(GLIB_MKENUMS = '%s\\bin\\glib-mkenums' % env_pango['PREFIX'])
env_pango_mk_h = env_pango_mk.Clone(GLIB_MKENUMS_ARGV = (('fhead', r'"#ifndef __PANGO_ENUM_TYPES_H__\n#define __PANGO_ENUM_TYPES_H__\n\n#include <glib-object.h>\n\nG_BEGIN_DECLS\n"'),
                            ('fprod', r'"/* enumerations from \"@filename@\" */\n"'),
                            ('vhead', r'"GType @enum_name@_get_type (void);\n#define PANGO_TYPE_@ENUMSHORT@ (@enum_name@_get_type())\n"'),
                            ('ftail', r'"G_END_DECLS\n\n#endif /* __PANGO_ENUM_TYPES_H__ */"')))
env_pango_mk_h.Depends(env_pango_mk_h.MkenumsGenerator('pango-enum-types.h', pango_headers), 'SConscript')

env_pango_mk_c = env_pango_mk.Clone(GLIB_MKENUMS_ARGV = (('fhead', '"#include <pango.h>"'),
                            ('fprod', r'"\n/* enumerations from \"@filename@\" */"'),
                            ('vhead', r'"GType\n@enum_name@_get_type (void)\n{\n  static GType etype = 0;\n  if (etype == 0) {\n    static const G@Type@Value values[] = {"'),
                            ('vprod', r'"      { @VALUENAME@, \"@VALUENAME@\", \"@valuenick@\" },"'),
                            ('vtail', r'"      { 0, NULL, NULL }\n    };\n    etype = g_@type@_register_static (\"@EnumName@\", values);\n  }\n  return etype;\n}\n"')))
env_pango_mk_c.Depends(env_pango_mk_c.MkenumsGenerator('pango-enum-types.c', pango_headers), 'SConscript')

env_pango.DotIn('pango-features.h', 'pango-features.h.in')
if 'dev' in env['install']:
    env.Alias('install', env.Install(r'C:/include/pango-1.0/pango', pango_headers + ['pango-enum-types.h', 'pango-features.h']))

env_pango['DOT_SYMBOLS_FLAGS'] = '-DINCLUDE_VARIABLES -DG_OS_WIN32 -DALL_FILES'

#replace string literals in pango-language-sample-table.h with hex
def replace_with_hex(target, source, env):
    def dr(mo):
        return '"' + "".join(map(lambda x: '\\x%2x'%ord(x), mo.group(1))) + '"'
    ft = file(str(target[0]), 'wb')
    fs = file(str(source[0]), 'rb')
    lines = fs.read()
    lines = re.sub(r'"(.*?)"', dr, lines)
    ft.write(lines)
    ft.close()
    fs.close()

env_pango.Command('pango-language-sample-table.h', 'pango-language-sample-table.h.in', replace_with_hex)

env_pango.DotIn('pango.rc', 'pango.rc.in')
env_pango.RES('pango.res', 'pango.rc')
env_pango.ParseConfig('pkg-config cairo --cflags --libs')
env_pango.ParseConfig('pkg-config gobject-2.0 --cflags --libs')
env_pango.ParseConfig('pkg-config gmodule-2.0 --cflags --libs')
#env_pango.Append(LIBS = ['msimg32',  'gdi32', 'user32'])
dll = env_pango.SharedLibrary(['libpango' + env_pango['LIB_SUFFIX'] + '.dll', 'pango-1.0.lib'], pango_sources + ['mini-fribidi/mini-fribidi.lib', 'pango.def', 'pango.res'])
env_pango.Depends(dll, 'pango-language-sample-table.h')

env_pango.AddPostAction(dll, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')
if 'run' in env['install']:
    env.Alias('install', env.Install(r'C:/bin', 'libpango' + env_pango['LIB_SUFFIX'] + '.dll'))

if 'dev' in env['install']:
    env.Alias('install', env.Install(r'C:/lib', 'pango-1.0.lib'))
    env.Alias('install', env.InstallAs(r'C:/lib/libpango-1.0.lib', 'pango-1.0.lib'))
    if env_pango['DEBUG'] == 1:
        env.Alias('install', env.Install(r'C:/pdb', 'libpango.pdb'))
'''
#freetype2 doesn't compile yet
#pangoft2
env_pangoft2 = env.Clone(PDB='libpangoft2.pdb')
env_pangoft2.Append(CPPDEFINES=['HAVE_FREETYPE', ('PANGO_MODULE_PREFIX', '_pango_basic_ft2')])
libpangoft2_HEADERS = Split("\
	pango-ot.h		\
	pangofc-font.h		\
	pangofc-fontmap.h	\
	pangofc-decoder.h	\
	pangoft2.h")
libpangoft2_SOURCES = Split(" \
	pangofc-font.c	   	\
	pangofc-fontmap.c	\
	pangofc-decoder.c	\
	pangoft2.c")
libpangoft2_SOURCES += Split("\
	module-defs-fc.c	\
	pangoft2-fontmap.c	\
	pangoft2-render.c	\
	pango-ot-buffer.c	\
	pango-ot-info.c		\
	pango-ot-ruleset.c      \
	pango-ot-tag.c")
env_pangoft2.DotIn('module-defs-fc.c', 'module-defs-fc.c.win32')
env_pangoft2.ParseConfig('pkg-config freetype2 --cflags --libs')
env_pangoft2.ParseConfig('pkg-config gobject-2.0 --cflags --libs')
env_pangoft2.ParseConfig('pkg-config gmodule-2.0 --cflags --libs')
env_pangoft2.Append(LIBS=['kernel32', 'user32', 'gdi32', 'advapi32'])
dll = env_pangoft2.SharedLibrary(['libpangoft2' + env_pangoft2['LIB_SUFFIX'] + '.dll', 'pangoft2-1.0.lib'], libpangoft2_SOURCES + ['pango-1.0.lib', 'pangoft2.def', 'pango.res', 'opentype/libharfbuzz.lib'])
env_pangoft2.AddPostAction(dll, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')

if 'run' in env['install']:
    env.Alias('install', env.Install(r'C:/bin', 'libpangoft2' + env_pangoft2['LIB_SUFFIX'] + '.dll'))

if 'dev' in env['install']:
    env.Alias('install', env.Install(r'C:/include/pango-1.0/pango', libpangoft2_HEADERS))
    env.Alias('install', env.Install(r'C:/lib', 'pangoft2-1.0.lib'))
    env.Alias('install', env.InstallAs(r'C:/lib/libpangoft2-1.0.lib', 'pangoft2-1.0.lib'))
    if env_pangoft2['DEBUG'] == 1:
        env.Alias('install', env.Install(r'C:/pdb', 'libpangoft2.pdb'))
'''

#pangocairo
env_pangocairo = env.Clone(PDB='libpangocairo.pdb')
env_pangocairo.Append(CPPDEFINES=['HAVE_CAIRO_WIN32'])
libpangocairo_SOURCES = Split(" \
	pangocairo-context.c    \
	pangocairo-font.c	\
	pangocairo-fontmap.c    \
	pangocairo-render.c")
libpangocairo_SOURCES += Split("pangocairo-win32font.c pangocairo-win32fontmap.c")
env_pangocairo.ParseConfig('pkg-config cairo --cflags --libs')
env_pangocairo.ParseConfig('pkg-config gobject-2.0 --cflags --libs')
env_pangocairo.ParseConfig('pkg-config gmodule-2.0 --cflags --libs')
env_pangocairo.Append(LIBS=['kernel32', 'user32', 'gdi32', 'advapi32'])
dll = env_pangocairo.SharedLibrary(['libpangocairo' + env_pangocairo['LIB_SUFFIX'] + '.dll', 'pangocairo-1.0.lib'], libpangocairo_SOURCES + ['pango-1.0.lib', 'pangowin32-1.0.lib', 'pangocairo.def', 'pango.res'])
env_pangocairo.AddPostAction(dll, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')

if 'run' in env['install']:
    env.Alias('install', env.Install(r'C:/bin', 'libpangocairo' + env_pangocairo['LIB_SUFFIX'] + '.dll'))

if 'dev' in env['install']:
    env.Alias('install', env.Install(r'C:/include/pango-1.0/pango', 'pangocairo.h'))
    env.Alias('install', env.Install(r'C:/lib', 'pangocairo-1.0.lib'))
    env.Alias('install', env.InstallAs(r'C:/lib/libpangocairo-1.0.lib', 'pangocairo-1.0.lib'))
    if env_pangocairo['DEBUG'] == 1:
        env.Alias('install', env.Install(r'C:/pdb', 'libpangocairo.pdb'))

#modules
env_modules_basic_win32 = env.Clone()
env_modules_basic_win32.ParseConfig('pkg-config gobject-2.0 --cflags --libs')
env_modules_basic_win32.Append(CPPDEFINES=[('PANGO_MODULE_PREFIX', '_pango_basic_win32')])
env_modules_basic_win32.StaticObject('basic-win32.obj', '#modules/basic/basic-win32.c')
#pangowin32
env_pangowin32 = env.Clone(PDB='libpangowin32.pdb')
env_pangowin32.Append(CPPDEFINES=[('PANGO_MODULE_PREFIX', '_pango_basic_win32')])
libpangowin32_SOURCES = Split(" \
	module-defs-win32.c	\
	pangowin32.c		\
	pangowin32-fontcache.c	\
	pangowin32-fontmap.c")
env_pangowin32.DotIn('module-defs-win32.c', 'module-defs-win32.c.win32')
env_pangowin32.ParseConfig('pkg-config cairo --cflags --libs')
env_pangowin32.ParseConfig('pkg-config gobject-2.0 --cflags --libs')
env_pangowin32.ParseConfig('pkg-config gmodule-2.0 --cflags --libs')
env_pangowin32.Append(LIBS=['kernel32', 'user32', 'gdi32', 'advapi32'])
dll = env_pangowin32.SharedLibrary(['libpangowin32' + env_pangowin32['LIB_SUFFIX'] + '.dll', 'pangowin32-1.0.lib'], libpangowin32_SOURCES + ['pango-1.0.lib', 'basic-win32.obj', 'pangowin32.def', 'pango.res'])
env_pangowin32.AddPostAction(dll, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')
if 'run' in env['install']:
    env.Alias('install', env.Install(r'C:/bin', 'libpangowin32' + env_pangowin32['LIB_SUFFIX'] + '.dll'))
if 'dev' in env['install']:
    env.Alias('install', env.Install(r'C:/include/pango-1.0/pango', 'pangowin32.h'))
    env.Alias('install', env.Install(r'C:/lib', 'pangowin32-1.0.lib'))
    env.Alias('install', env.InstallAs(r'C:/lib/libpangowin32-1.0.lib', 'pangowin32-1.0.lib'))
    if env_pangowin32['DEBUG'] == 1:
        env.Alias('install', env.Install(r'C:/pdb', 'libpangowin32.pdb'))

#pango-query
env_pango_query_modules = env_pango.Clone(PDB = 'pango-query.pdb')
env_pango_query_modules.AddPostAction(
    env_pango_query_modules.Program('pango-querymodules', ['querymodules.c', 'pangowin32-1.0.lib', 'pango-1.0.lib']),
    'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')
query_install = env_pango_query_modules.Install(r'C:/bin', 'pango-querymodules.exe')
env_pango_query_modules.PrependENVPath("PATH", env_pango_query_modules['PREFIX'] + r'\\bin')
env_pango_query_modules.Command('pango.modules', 'pango-querymodules.exe', '$SOURCE > $TARGET')
pango_modules_install = env.Install(r'C:/etc/pango/', 'pango.modules')
if 'run' in env['install']:
    env.Alias('install', pango_modules_install)
